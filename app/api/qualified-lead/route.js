/**
 * API endpoint para salvar leads qualificados
 * Implementa√ß√£o robusta com tratamento de erros e logs detalhados
 * For√ßa o uso do runtime Node.js para compatibilidade com o m√≥dulo pg
 * Vers√£o otimizada para ambiente de produ√ß√£o no Vercel
 */

// Definir explicitamente o runtime como Node.js
export const runtime = 'nodejs';

// Definir o timeout da Edge Function para 10 segundos (m√°ximo permitido)
export const maxDuration = 10;

import { NextResponse } from 'next/server';

// Importar servi√ßo simples de armazenamento de leads
// Esta solu√ß√£o usa import din√¢mico para o m√≥dulo pg
import { saveQualifiedLead, testDatabaseConnection } from '@/lib/simple-lead-storage';

// Fun√ß√£o para validar email
function isValidEmail(email) {
  if (!email) return false;
  
  try {
    const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return re.test(String(email).toLowerCase());
  } catch (error) {
    console.error('Erro ao validar email:', error);
    return false;
  }
}

// Fun√ß√£o para validar telefone
function isValidPhone(phone) {
  if (!phone) return false;
  
  try {
    // Remove caracteres n√£o num√©ricos
    const numericPhone = String(phone).replace(/\D/g, '');
    // Verificar se tem pelo menos 8 d√≠gitos (n√∫mero b√°sico)
    return numericPhone.length >= 8;
  } catch (error) {
    console.error('Erro ao validar telefone:', error);
    return false;
  }
}

// Fun√ß√£o para normalizar valor booleano com melhor tratamento de tipos
function normalizeBooleanValue(value) {
  // Log para depura√ß√£o do valor recebido
  console.log('normalizeBooleanValue recebeu:', value, typeof value);
  
  // Verificar valores que devem ser considerados como true
  if (value === true || 
      value === 'true' || 
      value === 1 || 
      value === '1' || 
      (typeof value === 'string' && value.toLowerCase() === 'true')) {
    return true;
  }
  
  // Todos os outros casos s√£o false
  return false;
}

// Handler para m√©todo POST
export async function POST(request) {
  console.log('üìù Recebida requisi√ß√£o POST para /api/qualified-lead');
  console.log(`üîç Ambiente: ${process.env.NODE_ENV || 'desenvolvimento'}`);
  console.log(`üîç Vercel Env: ${process.env.VERCEL_ENV || 'local'}`);
  console.log(`üîç DATABASE_URL configurada: ${!!process.env.DATABASE_URL}`);
  
  try {
    // Obter dados do corpo da requisi√ß√£o com tratamento de erros robusto
    let data;
    try {
      data = await request.json();
      console.log('Dados recebidos:', JSON.stringify(data, null, 2));
    } catch (parseError) {
      console.error('‚ùå Erro ao processar JSON da requisi√ß√£o:', parseError.message);
      return NextResponse.json(
        { error: 'Formato de dados inv√°lido', details: parseError.message },
        { status: 400 }
      );
    }
    
    const { email, phone, isProgrammer, utmSource, utmMedium, utmCampaign } = data;
    
    // Validar dados obrigat√≥rios
    if (!email || !isValidEmail(email)) {
      console.warn('Email inv√°lido recebido:', email);
      return NextResponse.json(
        { error: 'Email inv√°lido', details: 'Formato de email n√£o reconhecido' },
        { status: 400 }
      );
    }
    
    if (!phone || !isValidPhone(phone)) {
      console.warn('Telefone inv√°lido recebido:', phone);
      return NextResponse.json(
        { error: 'Telefone inv√°lido', details: 'Formato de telefone n√£o reconhecido' },
        { status: 400 }
      );
    }
    
    // Normalizar o valor de isProgrammer para garantir que seja um booleano v√°lido
    const normalizedIsProgrammer = normalizeBooleanValue(isProgrammer);
    
    // Log detalhado para depura√ß√£o
    console.log('Valor original de isProgrammer recebido na API:', isProgrammer, typeof isProgrammer);
    console.log('Valor como string:', String(isProgrammer));
    console.log('Valor normalizado de isProgrammer:', normalizedIsProgrammer, typeof normalizedIsProgrammer);
    
    // Obter informa√ß√µes adicionais da requisi√ß√£o
    const ipAddress = request.headers.get('x-forwarded-for') || 
                     request.headers.get('x-real-ip') || 
                     'unknown';
                     
    const userAgent = request.headers.get('user-agent') || 'unknown';
    
    // Salvar lead no banco de dados com tratamento de erros avan√ßado
    try {
      console.log('üîç Salvando lead usando m√©todo robusto e otimizado para produ√ß√£o...');
      
      // Implementar timeout para evitar que a fun√ß√£o fique bloqueada indefinidamente
      const savePromise = saveQualifiedLead({
        email,
        phone,
        isProgrammer: normalizedIsProgrammer,
        utmSource,
        utmMedium,
        utmCampaign,
        ipAddress,
        userAgent
      });
      
      // Definir um timeout de 8 segundos (dentro do limite de 10s do Vercel Edge Functions)
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout ao salvar lead no banco de dados')), 8000);
      });
      
      // Usar Promise.race para garantir que n√£o exceda o timeout
      const savedLead = await Promise.race([savePromise, timeoutPromise]);
      
      // Verificar se o lead foi salvo como mock (indica problema no banco)
      if (savedLead._mock) {
        console.warn('‚ö†Ô∏è Lead salvo como mock devido a:', savedLead._mockReason);
        
        // Retornar resposta de sucesso parcial
        return NextResponse.json({ 
          success: true, // Manter como true para n√£o bloquear o fluxo do usu√°rio
          message: 'Lead recebido, mas salvo temporariamente',
          warning: 'Os dados foram recebidos, mas podem n√£o ter sido armazenados permanentemente',
          reason: savedLead._mockReason,
          data: {
            email: savedLead.email,
            isProgrammer: savedLead.is_programmer
          }
        });
      }
      
      // Log para depura√ß√£o
      console.log('‚úÖ Lead salvo com sucesso no banco de dados:', {
        email: savedLead.email,
        isProgrammer: savedLead.is_programmer
      });
      
      // Retornar resposta de sucesso
      return NextResponse.json({ 
        success: true, 
        message: 'Lead qualificado salvo com sucesso',
        data: {
          email: savedLead.email,
          isProgrammer: savedLead.is_programmer
        }
      });
    } catch (dbError) {
      console.error('‚ùå Erro ao salvar lead no banco de dados:', dbError.message);
      console.error('Detalhes do erro:', dbError.stack);
      
      // Tentar registrar o erro em um servi√ßo de monitoramento se estiver em produ√ß√£o
      if (process.env.VERCEL_ENV === 'production') {
        try {
          // Aqui poderia ser implementada integra√ß√£o com servi√ßos como Sentry, LogRocket, etc.
          console.error(`[CRITICAL] Erro de produ√ß√£o ao salvar lead: ${email}`);
        } catch (monitorError) {
          // Ignorar erros do servi√ßo de monitoramento
        }
      }
      
      // Retornar resposta de erro, mas com c√≥digo 200 para n√£o bloquear o fluxo do usu√°rio
      return NextResponse.json({ 
        success: true, // Mant√©m como true para n√£o bloquear o fluxo do usu√°rio
        message: 'Lead recebido, mas houve um problema ao salvar no banco de dados',
        warning: 'Os dados foram recebidos, mas podem n√£o ter sido armazenados permanentemente',
        error: dbError.message
      });
    }
  } catch (error) {
    console.error('‚ùå Erro ao processar requisi√ß√£o:', error);
    console.error('Stack trace:', error.stack);
    
    // Retornar resposta de erro
    return NextResponse.json(
      { error: 'Erro ao processar requisi√ß√£o', details: error.message },
      { status: 500 }
    );
  }
}

// Handler para m√©todo GET (diagn√≥stico)
export async function GET(request) {
  // Verificar se √© uma requisi√ß√£o de diagn√≥stico
  const { searchParams } = new URL(request.url);
  const isDiagnostic = searchParams.get('diagnostic') === 'true';
  
  if (isDiagnostic) {
    try {
      console.log('üîç Executando diagn√≥stico completo da API e banco de dados...');
      
      // Testar conex√£o com o banco de dados com timeout
      let connectionTest;
      try {
        const testPromise = testDatabaseConnection();
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Timeout ao testar conex√£o com o banco')), 5000);
        });
        
        connectionTest = await Promise.race([testPromise, timeoutPromise]);
      } catch (dbError) {
        connectionTest = {
          success: false,
          message: `Erro ao testar conex√£o: ${dbError.message}`,
          error: dbError.message,
          stack: dbError.stack
        };
      }
      
      // Verificar informa√ß√µes do ambiente
      const environmentInfo = {
        NODE_ENV: process.env.NODE_ENV || 'n√£o definido',
        VERCEL_ENV: process.env.VERCEL_ENV || 'n√£o definido',
        DATABASE_URL_SET: !!process.env.DATABASE_URL,
        DATABASE_SSL: process.env.DATABASE_SSL || 'n√£o definido',
        RUNTIME: process.env.NEXT_RUNTIME || 'n√£o definido',
        SERVER_RUNTIME: process.env.SERVER_RUNTIME || 'n√£o definido'
      };
      
      // Verificar informa√ß√µes do sistema
      const systemInfo = {
        platform: process.platform,
        nodeVersion: process.version,
        memoryUsage: process.memoryUsage(),
        uptime: process.uptime()
      };
      
      return NextResponse.json({
        status: connectionTest.success ? 'API e banco de dados operacionais' : 'API operacional, mas com problemas no banco de dados',
        timestamp: new Date().toISOString(),
        database: connectionTest,
        environment: environmentInfo,
        system: systemInfo,
        request: {
          url: request.url,
          method: request.method,
          headers: Object.fromEntries(request.headers.entries())
        }
      });
    } catch (error) {
      console.error('‚ùå Erro ao executar diagn√≥stico:', error);
      
      return NextResponse.json({
        status: 'API operacional, mas com problemas no diagn√≥stico',
        timestamp: new Date().toISOString(),
        error: error.message,
        stack: error.stack,
        environment: {
          NODE_ENV: process.env.NODE_ENV || 'n√£o definido',
          VERCEL_ENV: process.env.VERCEL_ENV || 'n√£o definido',
          DATABASE_URL_SET: !!process.env.DATABASE_URL
        }
      });
    }
  }
  
  // Resposta padr√£o para m√©todo n√£o permitido
  return NextResponse.json(
    { error: 'M√©todo n√£o permitido' },
    { status: 405 }
  );
}
